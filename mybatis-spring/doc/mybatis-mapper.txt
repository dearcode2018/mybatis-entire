
update语句
当在update语句中使用if标签时，如果前面的if没有执行，则或导致逗号多余错误。
使用set标签可以动态的配置SET 关键字，剔除追加到条件末尾的任何不相关的逗号。
没有使用if标签时，如果有一个参数为null，都会导致错误
<!-- 示例 -->
<update id="updateStudent" parameterType="StudentEntity">   
    UPDATE STUDENT_TBL    
    <set>   
        <if test="studentName!=null and studentName!='' ">   
            STUDENT_TBL.STUDENT_NAME = #{studentName},    
        </if>   
        <if test="studentSex!=null and studentSex!='' ">   
            STUDENT_TBL.STUDENT_SEX = #{studentSex},    
        </if>   
        <if test="studentBirthday!=null ">   
            STUDENT_TBL.STUDENT_BIRTHDAY = #{studentBirthday},    
        </if>   
        <if test="classEntity!=null and classEntity.classID!=null and classEntity.classID!='' ">   
            STUDENT_TBL.CLASS_ID = #{classEntity.classID}    
        </if>   
    </set>   
    WHERE STUDENT_TBL.STUDENT_ID = #{studentID};    
</update> 


foreach
foreach元素的属性主要有 item，index，collection，open，separator，close。

item表示集合中每一个元素进行迭代时的别名.

index指 定一个名字，用于表示在迭代过程中，每次迭代到的位置， 	
在list和数组中,index是元素的序号，在map中，index是元素的key

open表示该语句以什么开始，separator表示在每次进行迭代之间以什么符号作为分隔 符.

close表示以什么结束.

foreach一共有三种类型，分别为List,[](array),Map三种。
collection = array / list / map对象中value类型有array / list，此时collection等于
需要遍历的array / list 对应的key.

例如: Map<String, Object> map;
List<Integer> idList = null;
map.put("idList", "idList"); -- 此时 collection = idsList

Integer[] idArray = null;
map.put("idArray", idArray);-- 此时 collection = idArray
Mapper接口中以单个Map<String, Object> map 作为入参.
如果想直接遍历这个单个Map参数，可以在其前加上@Param(keyName) Map
来进行，此时collection = keyName

反之，单个参数为List或数组，则collection分别是list/array，若是map则需要
另外协调.

因为: Mapper接口方法的参数都将被封装为Map，key是参数名，value是参数值，
若某个入参类型是数组，则其key固定为array，若为List则key固定为list，
若为Map则不再进一步封装，collection此时的值应该是Map中value是数组或
List所对应的key，因此入参的Map建议为 Map<String, Object>形式，这样
就可以将List或数组put进去，以后需要遍历哪个list或数组则collection=key值即可.

 要做foreach的对象，作为入参时，List<?>对象默认用list代替作为键，
 数组对象有array代替作为键，Map对象用map代替作为键。
当然在作为入参时可以使用@Param("keyName")来设置键，
设置keyName后，list,array,map将会失效。 
除了入参这种情况外，还有一种作为参数对象的某个字段的时候。举个例子：
如果User有属性List ids。入参是User对象，那么这个collection = "ids"

如果User有属性Ids ids;其中Ids是个对象，Ids有个属性List id;入参是User对象，
那么collection = "ids.id"
上面只是举例，具体collection等于什么，就看你想对哪个元素做循环。该参数为必选



<!-- 批量插入，大部分数据库是支持values()()这种形式的插入语句，可以插入多条 -->
<insert id="ins_string_string">  
    insert into string_string (key, value) values  
    <foreach item="item" index="key" collection="map"  
        open="" separator="," close="">(#{key}, #{item})
    </foreach>  
</insert>  

<select id="sel_key_cols" resultType="int">  
    select count(*) from key_cols where  
    <foreach item="item" index="key" collection="map"  
        open="" separator="AND" close="">${key} = #{item}
    </foreach>  
</select>  
可以看到这里用key=value来作为查询条件，对于动态的查询，
这种处理方式可以借鉴。一定要注意到$和#的区别，
$的参数直接输出，#的参数会被替换为?，然后传入参数值执行。 
#的参数被替换为? 然后将参数传给PrepareStatement去构造sql语句.

foreach 总结: 入参类型是List或数组，collection分别填写list/array，若入参是
map类型，则collection填写map参数里的key，不要用list或array等关键字，但
若想直接遍历该map，可以加@Param(keyName)，collection=keyName即可.



